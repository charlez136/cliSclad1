/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxTreeMap from 'devextreme/viz/tree_map';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/**
 * The TreeMap is a widget that displays hierarchical data by using nested rectangles.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxTreeMapComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTreeMap;
    /**
     * Specifies the name of the data source field that provides nested items for a group. Applies to hierarchical data sources only.
     */
    childrenField: string;
    /**
     * Specifies the name of the data source field that provides colors for tiles.
     */
    colorField: string;
    /**
     * Manages the color settings.
     */
    colorizer: {
        colorCodeField?: string;
        colorizeGroups?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        range?: Array<number>;
        type?: string;
    };
    /**
     * Binds the widget to data.
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;
    /**
     * Specifies whether the widget responds to the user interaction.
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    elementAttr: any;
    /**
     * Configures the exporting and printing features.
     */
    export: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
        svgToCanvas?: Function;
    };
    /**
     * Configures groups.
     */
    group: {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number;
        hoverEnabled?: boolean;
        hoverStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
        label?: {
            font?: DevExpress.viz.Font;
            textOverflow?: string;
            visible?: boolean;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
    };
    /**
     * Specifies whether tiles and groups change their style when a user pauses on them.
     */
    hoverEnabled: boolean;
    /**
     * Specifies the name of the data source field that provides IDs for items. Applies to plain data sources only.
     */
    idField: string;
    /**
     * Specifies whether the user will interact with a single tile or its group.
     */
    interactWithGroup: boolean;
    /**
     * Specifies the name of the data source field that provides texts for tile and group labels.
     */
    labelField: string;
    /**
     * Specifies the layout algorithm.
     */
    layoutAlgorithm: Function | string;
    /**
     * Specifies the direction in which the items will be laid out.
     */
    layoutDirection: string;
    /**
     * Configures the loading indicator.
     */
    loadingIndicator: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: DevExpress.viz.Font;
        show?: boolean;
        text?: string;
    };
    /**
     * Specifies how many hierarchical levels must be visualized.
     */
    maxDepth: number;
    /**
     * Specifies the name of the data source field that provides parent IDs for items. Applies to plain data sources only.
     */
    parentField: string;
    /**
     * Notifies the widget that it is embedded into an HTML page that uses a tag modifying the path.
     */
    pathModified: boolean;
    /**
     * Specifies whether to redraw the widget when the size of the parent browser window changes or a mobile device rotates.
     */
    redrawOnResize: boolean;
    /**
     * Use the tile.label.textOverflow option instead.
     */
    resolveLabelOverflow: string;
    /**
     * Switches the widget to a right-to-left representation.
     */
    rtlEnabled: boolean;
    /**
     * Specifies whether a single or multiple nodes can be in the selected state simultaneously.
     */
    selectionMode: string;
    /**
     * Specifies the widget's size in pixels.
     */
    size: {
        height?: number;
        width?: number;
    };
    /**
     * Sets the name of the theme the widget uses.
     */
    theme: string;
    /**
     * Configures tiles.
     */
    tile: {
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
        label?: {
            font?: DevExpress.viz.Font;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
    };
    /**
     * Configures the widget's title.
     */
    title: string | {
        font?: DevExpress.viz.Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: DevExpress.viz.Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    };
    /**
     * Configures tooltips - small pop-up rectangles that display information about a data-visualizing widget element being pressed or hovered over with the mouse pointer.
     */
    tooltip: {
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: Element | JQuery;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: Function;
        enabled?: boolean;
        font?: DevExpress.viz.Font;
        format?: DevExpress.ui.format | string;
        opacity?: number;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number;
    };
    /**
     * Specifies the name of the data source field that provides values for tiles.
     */
    valueField: string;
    /**
     * A function that is executed when a node is clicked or tapped.
     */
    onClick: EventEmitter<any>;
    /**
     * A function that is executed before the widget is disposed of.
     */
    onDisposing: EventEmitter<any>;
    /**
     * A function that is executed when the widget's rendering has finished.
     */
    onDrawn: EventEmitter<any>;
    /**
     * A function that is executed when a user drills up or down.
     */
    onDrill: EventEmitter<any>;
    /**
     * A function that is executed after the widget is exported.
     */
    onExported: EventEmitter<any>;
    /**
     * A function that is executed before the widget is exported.
     */
    onExporting: EventEmitter<any>;
    /**
     * A function that is executed before a file with exported widget is saved to the user's local storage.
     */
    onFileSaving: EventEmitter<any>;
    /**
     * A function that is executed after the pointer enters or leaves a node.
     */
    onHoverChanged: EventEmitter<any>;
    /**
     * A function that is executed when an error or warning occurs.
     */
    onIncidentOccurred: EventEmitter<any>;
    /**
     * A function used in JavaScript frameworks to save the widget instance.
     */
    onInitialized: EventEmitter<any>;
    /**
     * A function that is executed only once, after the nodes are initialized.
     */
    onNodesInitialized: EventEmitter<any>;
    /**
     * A function that is executed before the nodes are displayed and each time the collection of active nodes is changed.
     */
    onNodesRendering: EventEmitter<any>;
    /**
     * A function that is executed after a widget option is changed.
     */
    onOptionChanged: EventEmitter<any>;
    /**
     * A function that is executed when a node is selected or selection is canceled.
     */
    onSelectionChanged: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    childrenFieldChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    colorFieldChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    colorizerChange: EventEmitter<{
        colorCodeField?: string;
        colorizeGroups?: boolean;
        palette?: string | Array<string>;
        paletteExtensionMode?: string;
        range?: Array<number>;
        type?: string;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    disabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    elementAttrChange: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
        svgToCanvas?: Function;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    groupChange: EventEmitter<{
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        headerHeight?: number;
        hoverEnabled?: boolean;
        hoverStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
        label?: {
            font?: DevExpress.viz.Font;
            textOverflow?: string;
            visible?: boolean;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    hoverEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    idFieldChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    interactWithGroupChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    labelFieldChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    layoutAlgorithmChange: EventEmitter<Function | string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    layoutDirectionChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: DevExpress.viz.Font;
        show?: boolean;
        text?: string;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    maxDepthChange: EventEmitter<number>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    parentFieldChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    resolveLabelOverflowChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    selectionModeChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    sizeChange: EventEmitter<{
        height?: number;
        width?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    themeChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    tileChange: EventEmitter<{
        border?: {
            color?: string;
            width?: number;
        };
        color?: string;
        hoverStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
        label?: {
            font?: DevExpress.viz.Font;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        selectionStyle?: {
            border?: {
                color?: string;
                width?: number;
            };
            color?: string;
        };
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    titleChange: EventEmitter<string | {
        font?: DevExpress.viz.Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: DevExpress.viz.Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    tooltipChange: EventEmitter<{
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: Element | JQuery;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: Function;
        enabled?: boolean;
        font?: DevExpress.viz.Font;
        format?: DevExpress.ui.format | string;
        opacity?: number;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        zIndex?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    valueFieldChange: EventEmitter<string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxTreeMap;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxTreeMapComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxTreeMapComponent, "dx-tree-map", never, {
    "childrenField": "childrenField";
    "colorField": "colorField";
    "colorizer": "colorizer";
    "dataSource": "dataSource";
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "export": "export";
    "group": "group";
    "hoverEnabled": "hoverEnabled";
    "idField": "idField";
    "interactWithGroup": "interactWithGroup";
    "labelField": "labelField";
    "layoutAlgorithm": "layoutAlgorithm";
    "layoutDirection": "layoutDirection";
    "loadingIndicator": "loadingIndicator";
    "maxDepth": "maxDepth";
    "parentField": "parentField";
    "pathModified": "pathModified";
    "redrawOnResize": "redrawOnResize";
    "resolveLabelOverflow": "resolveLabelOverflow";
    "rtlEnabled": "rtlEnabled";
    "selectionMode": "selectionMode";
    "size": "size";
    "theme": "theme";
    "tile": "tile";
    "title": "title";
    "tooltip": "tooltip";
    "valueField": "valueField";
}, {
    "onClick": "onClick";
    "onDisposing": "onDisposing";
    "onDrawn": "onDrawn";
    "onDrill": "onDrill";
    "onExported": "onExported";
    "onExporting": "onExporting";
    "onFileSaving": "onFileSaving";
    "onHoverChanged": "onHoverChanged";
    "onIncidentOccurred": "onIncidentOccurred";
    "onInitialized": "onInitialized";
    "onNodesInitialized": "onNodesInitialized";
    "onNodesRendering": "onNodesRendering";
    "onOptionChanged": "onOptionChanged";
    "onSelectionChanged": "onSelectionChanged";
    "childrenFieldChange": "childrenFieldChange";
    "colorFieldChange": "colorFieldChange";
    "colorizerChange": "colorizerChange";
    "dataSourceChange": "dataSourceChange";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "exportChange": "exportChange";
    "groupChange": "groupChange";
    "hoverEnabledChange": "hoverEnabledChange";
    "idFieldChange": "idFieldChange";
    "interactWithGroupChange": "interactWithGroupChange";
    "labelFieldChange": "labelFieldChange";
    "layoutAlgorithmChange": "layoutAlgorithmChange";
    "layoutDirectionChange": "layoutDirectionChange";
    "loadingIndicatorChange": "loadingIndicatorChange";
    "maxDepthChange": "maxDepthChange";
    "parentFieldChange": "parentFieldChange";
    "pathModifiedChange": "pathModifiedChange";
    "redrawOnResizeChange": "redrawOnResizeChange";
    "resolveLabelOverflowChange": "resolveLabelOverflowChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "selectionModeChange": "selectionModeChange";
    "sizeChange": "sizeChange";
    "themeChange": "themeChange";
    "tileChange": "tileChange";
    "titleChange": "titleChange";
    "tooltipChange": "tooltipChange";
    "valueFieldChange": "valueFieldChange";
}, never>;
}
export declare class DxTreeMapModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxTreeMapModule, [typeof DxTreeMapComponent], [typeof ɵngcc1.DxoColorizerModule, typeof ɵngcc1.DxoExportModule, typeof ɵngcc1.DxoGroupModule, typeof ɵngcc1.DxoBorderModule, typeof ɵngcc1.DxoHoverStyleModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxoFontModule, typeof ɵngcc1.DxoSelectionStyleModule, typeof ɵngcc1.DxoLoadingIndicatorModule, typeof ɵngcc1.DxoSizeModule, typeof ɵngcc1.DxoTileModule, typeof ɵngcc1.DxoTitleModule, typeof ɵngcc1.DxoMarginModule, typeof ɵngcc1.DxoSubtitleModule, typeof ɵngcc1.DxoTooltipModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoShadowModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxTreeMapComponent, typeof ɵngcc1.DxoColorizerModule, typeof ɵngcc1.DxoExportModule, typeof ɵngcc1.DxoGroupModule, typeof ɵngcc1.DxoBorderModule, typeof ɵngcc1.DxoHoverStyleModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxoFontModule, typeof ɵngcc1.DxoSelectionStyleModule, typeof ɵngcc1.DxoLoadingIndicatorModule, typeof ɵngcc1.DxoSizeModule, typeof ɵngcc1.DxoTileModule, typeof ɵngcc1.DxoTitleModule, typeof ɵngcc1.DxoMarginModule, typeof ɵngcc1.DxoSubtitleModule, typeof ɵngcc1.DxoTooltipModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoShadowModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxTreeMapModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,