/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxFileManager from 'devextreme/ui/file_manager';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/**
 * [tags] ctp The FileManager is a widget that allows users to upload, select, and manage files and directories in different file storages. #include common-ctp-note with { component: "FileManager" }
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxFileManagerComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxFileManager;
    /**
     * Specifies the shortcut key that sets focus on the widget.
     */
    accessKey: string;
    /**
     * Specifies whether or not the widget changes its state when interacting with a user.
     */
    activeStateEnabled: boolean;
    /**
     * Specifies the allowed upload file extensions.
     */
    allowedFileExtensions: Array<string>;
    /**
     * Configures the context menu settings.
     */
    contextMenu: DevExpress.ui.dxFileManagerContextMenu;
    /**
     * Specifies the path that is used when the FileManager is initialized.
     */
    currentPath: string;
    /**
     * Customizes columns in details view. Applies only if itemView.mode is "details".
     */
    customizeDetailColumns: Function;
    /**
     * Allows you to provide custom icons to be used as thumbnails.
     */
    customizeThumbnail: Function;
    /**
     * Specifies whether the widget responds to user interaction.
     */
    disabled: boolean;
    /**
     * Specifies the attributes to be attached to the widget's root element.
     */
    elementAttr: any;
    /**
     * Specifies the file provider.
     */
    fileProvider: any;
    /**
     * Specifies whether the widget can be focused using keyboard navigation.
     */
    focusStateEnabled: boolean;
    /**
     * Specifies the widget's height.
     */
    height: number | Function | string;
    /**
     * Specifies text for a hint that appears when a user pauses on the widget.
     */
    hint: string;
    /**
     * Specifies whether the widget changes its state when a user pauses on it.
     */
    hoverStateEnabled: boolean;
    /**
     * Configures the file and folder view.
     */
    itemView: {
        mode?: string;
        showFolders?: boolean;
        showParentFolder?: boolean;
    };
    /**
     * Specifies actions that a user is allowed to perform on files and folders.
     */
    permissions: {
        copy?: boolean;
        create?: boolean;
        download?: boolean;
        move?: boolean;
        remove?: boolean;
        rename?: boolean;
        upload?: boolean;
    };
    /**
     * Specifies the root folder name.
     */
    rootFolderName: string;
    /**
     * Switches the widget to a right-to-left representation.
     */
    rtlEnabled: boolean;
    /**
     * Specifies whether a user can select a single or multiple files and folders in the item view simultaneously.
     */
    selectionMode: string;
    /**
     * Specifies the number of the element when the Tab key is used for navigating.
     */
    tabIndex: number;
    /**
     * Configures toolbar settings.
     */
    toolbar: DevExpress.ui.dxFileManagerToolbar;
    /**
     * Configures upload settings.
     */
    upload: {
        maxFileSize?: number;
    };
    /**
     * Specifies whether the widget is visible.
     */
    visible: boolean;
    /**
     * Specifies the widget's width.
     */
    width: number | Function | string;
    /**
     * A function that is executed when the widget's content is ready and each time the content is changed.
     */
    onContentReady: EventEmitter<any>;
    /**
     * A function that is executed when the current directory is changed.
     */
    onCurrentDirectoryChanged: EventEmitter<any>;
    /**
     * A function that is executed before the widget is disposed of.
     */
    onDisposing: EventEmitter<any>;
    /**
     * A function used in JavaScript frameworks to save the widget instance.
     */
    onInitialized: EventEmitter<any>;
    /**
     * A function that is executed after a widget option is changed.
     */
    onOptionChanged: EventEmitter<any>;
    /**
     * A function that is executed when the selected file is opened.
     */
    onSelectedFileOpened: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    accessKeyChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    allowedFileExtensionsChange: EventEmitter<Array<string>>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    contextMenuChange: EventEmitter<DevExpress.ui.dxFileManagerContextMenu>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    currentPathChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    customizeDetailColumnsChange: EventEmitter<Function>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    customizeThumbnailChange: EventEmitter<Function>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    disabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    elementAttrChange: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    fileProviderChange: EventEmitter<any>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    hintChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    itemViewChange: EventEmitter<{
        mode?: string;
        showFolders?: boolean;
        showParentFolder?: boolean;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    permissionsChange: EventEmitter<{
        copy?: boolean;
        create?: boolean;
        download?: boolean;
        move?: boolean;
        remove?: boolean;
        rename?: boolean;
        upload?: boolean;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    rootFolderNameChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    selectionModeChange: EventEmitter<string>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    tabIndexChange: EventEmitter<number>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    toolbarChange: EventEmitter<DevExpress.ui.dxFileManagerToolbar>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    uploadChange: EventEmitter<{
        maxFileSize?: number;
    }>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    visibleChange: EventEmitter<boolean>;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxFileManager;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxFileManagerComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxFileManagerComponent, "dx-file-manager", never, {
    "accessKey": "accessKey";
    "activeStateEnabled": "activeStateEnabled";
    "allowedFileExtensions": "allowedFileExtensions";
    "contextMenu": "contextMenu";
    "currentPath": "currentPath";
    "customizeDetailColumns": "customizeDetailColumns";
    "customizeThumbnail": "customizeThumbnail";
    "disabled": "disabled";
    "elementAttr": "elementAttr";
    "fileProvider": "fileProvider";
    "focusStateEnabled": "focusStateEnabled";
    "height": "height";
    "hint": "hint";
    "hoverStateEnabled": "hoverStateEnabled";
    "itemView": "itemView";
    "permissions": "permissions";
    "rootFolderName": "rootFolderName";
    "rtlEnabled": "rtlEnabled";
    "selectionMode": "selectionMode";
    "tabIndex": "tabIndex";
    "toolbar": "toolbar";
    "upload": "upload";
    "visible": "visible";
    "width": "width";
}, {
    "onContentReady": "onContentReady";
    "onCurrentDirectoryChanged": "onCurrentDirectoryChanged";
    "onDisposing": "onDisposing";
    "onInitialized": "onInitialized";
    "onOptionChanged": "onOptionChanged";
    "onSelectedFileOpened": "onSelectedFileOpened";
    "accessKeyChange": "accessKeyChange";
    "activeStateEnabledChange": "activeStateEnabledChange";
    "allowedFileExtensionsChange": "allowedFileExtensionsChange";
    "contextMenuChange": "contextMenuChange";
    "currentPathChange": "currentPathChange";
    "customizeDetailColumnsChange": "customizeDetailColumnsChange";
    "customizeThumbnailChange": "customizeThumbnailChange";
    "disabledChange": "disabledChange";
    "elementAttrChange": "elementAttrChange";
    "fileProviderChange": "fileProviderChange";
    "focusStateEnabledChange": "focusStateEnabledChange";
    "heightChange": "heightChange";
    "hintChange": "hintChange";
    "hoverStateEnabledChange": "hoverStateEnabledChange";
    "itemViewChange": "itemViewChange";
    "permissionsChange": "permissionsChange";
    "rootFolderNameChange": "rootFolderNameChange";
    "rtlEnabledChange": "rtlEnabledChange";
    "selectionModeChange": "selectionModeChange";
    "tabIndexChange": "tabIndexChange";
    "toolbarChange": "toolbarChange";
    "uploadChange": "uploadChange";
    "visibleChange": "visibleChange";
    "widthChange": "widthChange";
}, never>;
}
export declare class DxFileManagerModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxFileManagerModule, [typeof DxFileManagerComponent], [typeof ɵngcc1.DxoContextMenuModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoItemViewModule, typeof ɵngcc1.DxoPermissionsModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxiFileSelectionItemModule, typeof ɵngcc1.DxoUploadModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxFileManagerComponent, typeof ɵngcc1.DxoContextMenuModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoItemViewModule, typeof ɵngcc1.DxoPermissionsModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxiFileSelectionItemModule, typeof ɵngcc1.DxoUploadModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxFileManagerModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,