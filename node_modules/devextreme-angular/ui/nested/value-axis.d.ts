/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { OnDestroy, EventEmitter, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { NestedOptionHost } from 'devextreme-angular/core';
import { NestedOption } from 'devextreme-angular/core';
import { DxiConstantLineComponent } from './constant-line-dxi';
import { DxiStripComponent } from './strip-dxi';
import * as ɵngcc0 from '@angular/core';
export declare class DxoValueAxisComponent extends NestedOption implements OnDestroy {
    allowDecimals: boolean;
    axisDivisionFactor: number;
    categories: Array<number | string | Date>;
    color: string;
    constantLines: Array<any | {
        color?: string;
        dashStyle?: string;
        displayBehindSeries?: boolean;
        extendAxis?: boolean;
        label?: {
            font?: DevExpress.viz.Font;
            text?: string;
            visible?: boolean;
        };
        value?: Date | number | string;
        width?: number;
    }>;
    constantLineStyle: {
        color?: string;
        dashStyle?: string;
        label?: {
            font?: DevExpress.viz.Font;
            visible?: boolean;
        };
        width?: number;
    };
    discreteAxisDivisionMode: string;
    endOnTick: boolean;
    grid: {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    inverted: boolean;
    label: {
        customizeHint?: Function;
        customizeText?: Function;
        font?: DevExpress.viz.Font;
        format?: DevExpress.ui.format | string;
        indentFromAxis?: number;
        overlappingBehavior?: string;
        visible?: boolean;
    };
    linearThreshold: number;
    logarithmBase: number;
    maxValueMargin: number;
    minorGrid: {
        color?: string;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTick: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    minorTickCount: number;
    minorTickInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    minValueMargin: number;
    minVisualRangeLength: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    opacity: number;
    showZero: boolean;
    strips: Array<any | {
        color?: string;
        endValue?: Date | number | string;
        label?: {
            font?: DevExpress.viz.Font;
            text?: string;
        };
        startValue?: Date | number | string;
    }>;
    stripStyle: {
        label?: {
            font?: DevExpress.viz.Font;
        };
    };
    tick: {
        color?: string;
        length?: number;
        opacity?: number;
        visible?: boolean;
        width?: number;
    };
    tickInterval: number | string | {
        days?: number;
        hours?: number;
        milliseconds?: number;
        minutes?: number;
        months?: number;
        quarters?: number;
        seconds?: number;
        weeks?: number;
        years?: number;
    };
    type: string;
    valueMarginsEnabled: boolean;
    valueType: string;
    visible: boolean;
    visualRange: DevExpress.viz.VizRange | Array<number | string | Date>;
    visualRangeUpdateMode: string;
    wholeRange: DevExpress.viz.VizRange | Array<number | string | Date>;
    width: number;
    max: number;
    min: number;
    /**
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
     */
    visualRangeChange: EventEmitter<DevExpress.viz.VizRange | Array<number | string | Date>>;
    protected readonly _optionPath: string;
    constantLinesChildren: QueryList<DxiConstantLineComponent>;
    stripsChildren: QueryList<DxiStripComponent>;
    constructor(parentOptionHost: NestedOptionHost, optionHost: NestedOptionHost);
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxoValueAxisComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DxoValueAxisComponent, "dxo-value-axis", never, {
    "allowDecimals": "allowDecimals";
    "axisDivisionFactor": "axisDivisionFactor";
    "categories": "categories";
    "color": "color";
    "constantLines": "constantLines";
    "constantLineStyle": "constantLineStyle";
    "discreteAxisDivisionMode": "discreteAxisDivisionMode";
    "endOnTick": "endOnTick";
    "grid": "grid";
    "inverted": "inverted";
    "label": "label";
    "linearThreshold": "linearThreshold";
    "logarithmBase": "logarithmBase";
    "maxValueMargin": "maxValueMargin";
    "minorGrid": "minorGrid";
    "minorTick": "minorTick";
    "minorTickCount": "minorTickCount";
    "minorTickInterval": "minorTickInterval";
    "minValueMargin": "minValueMargin";
    "minVisualRangeLength": "minVisualRangeLength";
    "opacity": "opacity";
    "showZero": "showZero";
    "strips": "strips";
    "stripStyle": "stripStyle";
    "tick": "tick";
    "tickInterval": "tickInterval";
    "type": "type";
    "valueMarginsEnabled": "valueMarginsEnabled";
    "valueType": "valueType";
    "visible": "visible";
    "visualRange": "visualRange";
    "visualRangeUpdateMode": "visualRangeUpdateMode";
    "wholeRange": "wholeRange";
    "width": "width";
    "max": "max";
    "min": "min";
}, {
    "visualRangeChange": "visualRangeChange";
}, ["constantLinesChildren", "stripsChildren"]>;
}
export declare class DxoValueAxisModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<DxoValueAxisModule, [typeof DxoValueAxisComponent], never, [typeof DxoValueAxisComponent]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<DxoValueAxisModule>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsdWUtYXhpcy5kLnRzIiwic291cmNlcyI6WyJ2YWx1ZS1heGlzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFrQkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBMElBOzs7O0FBRUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqIFZlcnNpb246IDE5LjIuNlxyXG4gKiBCdWlsZCBkYXRlOiBUaHUgSmFuIDMwIDIwMjBcclxuICpcclxuICogQ29weXJpZ2h0IChjKSAyMDEyIC0gMjAyMCBEZXZlbG9wZXIgRXhwcmVzcyBJbmMuIEFMTCBSSUdIVFMgUkVTRVJWRURcclxuICpcclxuICogVGhpcyBzb2Z0d2FyZSBtYXkgYmUgbW9kaWZpZWQgYW5kIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSB0ZXJtc1xyXG4gKiBvZiB0aGUgTUlUIGxpY2Vuc2UuIFNlZSB0aGUgTElDRU5TRSBmaWxlIGluIHRoZSByb290IG9mIHRoZSBwcm9qZWN0IGZvciBkZXRhaWxzLlxyXG4gKlxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vRGV2RXhwcmVzcy9kZXZleHRyZW1lLWFuZ3VsYXJcclxuICovXHJcbmltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBRdWVyeUxpc3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IERldkV4cHJlc3MgZnJvbSAnZGV2ZXh0cmVtZS9idW5kbGVzL2R4LmFsbCc7XHJcbmltcG9ydCB7IE5lc3RlZE9wdGlvbkhvc3QgfSBmcm9tICdkZXZleHRyZW1lLWFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5lc3RlZE9wdGlvbiB9IGZyb20gJ2RldmV4dHJlbWUtYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRHhpQ29uc3RhbnRMaW5lQ29tcG9uZW50IH0gZnJvbSAnLi9jb25zdGFudC1saW5lLWR4aSc7XHJcbmltcG9ydCB7IER4aVN0cmlwQ29tcG9uZW50IH0gZnJvbSAnLi9zdHJpcC1keGknO1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEeG9WYWx1ZUF4aXNDb21wb25lbnQgZXh0ZW5kcyBOZXN0ZWRPcHRpb24gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgYWxsb3dEZWNpbWFsczogYm9vbGVhbjtcclxuICAgIGF4aXNEaXZpc2lvbkZhY3RvcjogbnVtYmVyO1xyXG4gICAgY2F0ZWdvcmllczogQXJyYXk8bnVtYmVyIHwgc3RyaW5nIHwgRGF0ZT47XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgY29uc3RhbnRMaW5lczogQXJyYXk8YW55IHwge1xyXG4gICAgICAgIGNvbG9yPzogc3RyaW5nO1xyXG4gICAgICAgIGRhc2hTdHlsZT86IHN0cmluZztcclxuICAgICAgICBkaXNwbGF5QmVoaW5kU2VyaWVzPzogYm9vbGVhbjtcclxuICAgICAgICBleHRlbmRBeGlzPzogYm9vbGVhbjtcclxuICAgICAgICBsYWJlbD86IHtcclxuICAgICAgICAgICAgZm9udD86IERldkV4cHJlc3Mudml6LkZvbnQ7XHJcbiAgICAgICAgICAgIHRleHQ/OiBzdHJpbmc7XHJcbiAgICAgICAgICAgIHZpc2libGU/OiBib29sZWFuO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFsdWU/OiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nO1xyXG4gICAgICAgIHdpZHRoPzogbnVtYmVyO1xyXG4gICAgfT47XHJcbiAgICBjb25zdGFudExpbmVTdHlsZToge1xyXG4gICAgICAgIGNvbG9yPzogc3RyaW5nO1xyXG4gICAgICAgIGRhc2hTdHlsZT86IHN0cmluZztcclxuICAgICAgICBsYWJlbD86IHtcclxuICAgICAgICAgICAgZm9udD86IERldkV4cHJlc3Mudml6LkZvbnQ7XHJcbiAgICAgICAgICAgIHZpc2libGU/OiBib29sZWFuO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgd2lkdGg/OiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgZGlzY3JldGVBeGlzRGl2aXNpb25Nb2RlOiBzdHJpbmc7XHJcbiAgICBlbmRPblRpY2s6IGJvb2xlYW47XHJcbiAgICBncmlkOiB7XHJcbiAgICAgICAgY29sb3I/OiBzdHJpbmc7XHJcbiAgICAgICAgb3BhY2l0eT86IG51bWJlcjtcclxuICAgICAgICB2aXNpYmxlPzogYm9vbGVhbjtcclxuICAgICAgICB3aWR0aD86IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBpbnZlcnRlZDogYm9vbGVhbjtcclxuICAgIGxhYmVsOiB7XHJcbiAgICAgICAgY3VzdG9taXplSGludD86IEZ1bmN0aW9uO1xyXG4gICAgICAgIGN1c3RvbWl6ZVRleHQ/OiBGdW5jdGlvbjtcclxuICAgICAgICBmb250PzogRGV2RXhwcmVzcy52aXouRm9udDtcclxuICAgICAgICBmb3JtYXQ/OiBEZXZFeHByZXNzLnVpLmZvcm1hdCB8IHN0cmluZztcclxuICAgICAgICBpbmRlbnRGcm9tQXhpcz86IG51bWJlcjtcclxuICAgICAgICBvdmVybGFwcGluZ0JlaGF2aW9yPzogc3RyaW5nO1xyXG4gICAgICAgIHZpc2libGU/OiBib29sZWFuO1xyXG4gICAgfTtcclxuICAgIGxpbmVhclRocmVzaG9sZDogbnVtYmVyO1xyXG4gICAgbG9nYXJpdGhtQmFzZTogbnVtYmVyO1xyXG4gICAgbWF4VmFsdWVNYXJnaW46IG51bWJlcjtcclxuICAgIG1pbm9yR3JpZDoge1xyXG4gICAgICAgIGNvbG9yPzogc3RyaW5nO1xyXG4gICAgICAgIG9wYWNpdHk/OiBudW1iZXI7XHJcbiAgICAgICAgdmlzaWJsZT86IGJvb2xlYW47XHJcbiAgICAgICAgd2lkdGg/OiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgbWlub3JUaWNrOiB7XHJcbiAgICAgICAgY29sb3I/OiBzdHJpbmc7XHJcbiAgICAgICAgbGVuZ3RoPzogbnVtYmVyO1xyXG4gICAgICAgIG9wYWNpdHk/OiBudW1iZXI7XHJcbiAgICAgICAgdmlzaWJsZT86IGJvb2xlYW47XHJcbiAgICAgICAgd2lkdGg/OiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgbWlub3JUaWNrQ291bnQ6IG51bWJlcjtcclxuICAgIG1pbm9yVGlja0ludGVydmFsOiBudW1iZXIgfCBzdHJpbmcgfCB7XHJcbiAgICAgICAgZGF5cz86IG51bWJlcjtcclxuICAgICAgICBob3Vycz86IG51bWJlcjtcclxuICAgICAgICBtaWxsaXNlY29uZHM/OiBudW1iZXI7XHJcbiAgICAgICAgbWludXRlcz86IG51bWJlcjtcclxuICAgICAgICBtb250aHM/OiBudW1iZXI7XHJcbiAgICAgICAgcXVhcnRlcnM/OiBudW1iZXI7XHJcbiAgICAgICAgc2Vjb25kcz86IG51bWJlcjtcclxuICAgICAgICB3ZWVrcz86IG51bWJlcjtcclxuICAgICAgICB5ZWFycz86IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBtaW5WYWx1ZU1hcmdpbjogbnVtYmVyO1xyXG4gICAgbWluVmlzdWFsUmFuZ2VMZW5ndGg6IG51bWJlciB8IHN0cmluZyB8IHtcclxuICAgICAgICBkYXlzPzogbnVtYmVyO1xyXG4gICAgICAgIGhvdXJzPzogbnVtYmVyO1xyXG4gICAgICAgIG1pbGxpc2Vjb25kcz86IG51bWJlcjtcclxuICAgICAgICBtaW51dGVzPzogbnVtYmVyO1xyXG4gICAgICAgIG1vbnRocz86IG51bWJlcjtcclxuICAgICAgICBxdWFydGVycz86IG51bWJlcjtcclxuICAgICAgICBzZWNvbmRzPzogbnVtYmVyO1xyXG4gICAgICAgIHdlZWtzPzogbnVtYmVyO1xyXG4gICAgICAgIHllYXJzPzogbnVtYmVyO1xyXG4gICAgfTtcclxuICAgIG9wYWNpdHk6IG51bWJlcjtcclxuICAgIHNob3daZXJvOiBib29sZWFuO1xyXG4gICAgc3RyaXBzOiBBcnJheTxhbnkgfCB7XHJcbiAgICAgICAgY29sb3I/OiBzdHJpbmc7XHJcbiAgICAgICAgZW5kVmFsdWU/OiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nO1xyXG4gICAgICAgIGxhYmVsPzoge1xyXG4gICAgICAgICAgICBmb250PzogRGV2RXhwcmVzcy52aXouRm9udDtcclxuICAgICAgICAgICAgdGV4dD86IHN0cmluZztcclxuICAgICAgICB9O1xyXG4gICAgICAgIHN0YXJ0VmFsdWU/OiBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nO1xyXG4gICAgfT47XHJcbiAgICBzdHJpcFN0eWxlOiB7XHJcbiAgICAgICAgbGFiZWw/OiB7XHJcbiAgICAgICAgICAgIGZvbnQ/OiBEZXZFeHByZXNzLnZpei5Gb250O1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG4gICAgdGljazoge1xyXG4gICAgICAgIGNvbG9yPzogc3RyaW5nO1xyXG4gICAgICAgIGxlbmd0aD86IG51bWJlcjtcclxuICAgICAgICBvcGFjaXR5PzogbnVtYmVyO1xyXG4gICAgICAgIHZpc2libGU/OiBib29sZWFuO1xyXG4gICAgICAgIHdpZHRoPzogbnVtYmVyO1xyXG4gICAgfTtcclxuICAgIHRpY2tJbnRlcnZhbDogbnVtYmVyIHwgc3RyaW5nIHwge1xyXG4gICAgICAgIGRheXM/OiBudW1iZXI7XHJcbiAgICAgICAgaG91cnM/OiBudW1iZXI7XHJcbiAgICAgICAgbWlsbGlzZWNvbmRzPzogbnVtYmVyO1xyXG4gICAgICAgIG1pbnV0ZXM/OiBudW1iZXI7XHJcbiAgICAgICAgbW9udGhzPzogbnVtYmVyO1xyXG4gICAgICAgIHF1YXJ0ZXJzPzogbnVtYmVyO1xyXG4gICAgICAgIHNlY29uZHM/OiBudW1iZXI7XHJcbiAgICAgICAgd2Vla3M/OiBudW1iZXI7XHJcbiAgICAgICAgeWVhcnM/OiBudW1iZXI7XHJcbiAgICB9O1xyXG4gICAgdHlwZTogc3RyaW5nO1xyXG4gICAgdmFsdWVNYXJnaW5zRW5hYmxlZDogYm9vbGVhbjtcclxuICAgIHZhbHVlVHlwZTogc3RyaW5nO1xyXG4gICAgdmlzaWJsZTogYm9vbGVhbjtcclxuICAgIHZpc3VhbFJhbmdlOiBEZXZFeHByZXNzLnZpei5WaXpSYW5nZSB8IEFycmF5PG51bWJlciB8IHN0cmluZyB8IERhdGU+O1xyXG4gICAgdmlzdWFsUmFuZ2VVcGRhdGVNb2RlOiBzdHJpbmc7XHJcbiAgICB3aG9sZVJhbmdlOiBEZXZFeHByZXNzLnZpei5WaXpSYW5nZSB8IEFycmF5PG51bWJlciB8IHN0cmluZyB8IERhdGU+O1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIG1heDogbnVtYmVyO1xyXG4gICAgbWluOiBudW1iZXI7XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWVtYmVyIHN1cHBvcnRzIHRoZSBpbnRlcm5hbCBpbmZyYXN0cnVjdHVyZSBhbmQgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgZGlyZWN0bHkgZnJvbSB5b3VyIGNvZGUuXHJcbiAgICAgKi9cclxuICAgIHZpc3VhbFJhbmdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8RGV2RXhwcmVzcy52aXouVml6UmFuZ2UgfCBBcnJheTxudW1iZXIgfCBzdHJpbmcgfCBEYXRlPj47XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgX29wdGlvblBhdGg6IHN0cmluZztcclxuICAgIGNvbnN0YW50TGluZXNDaGlsZHJlbjogUXVlcnlMaXN0PER4aUNvbnN0YW50TGluZUNvbXBvbmVudD47XHJcbiAgICBzdHJpcHNDaGlsZHJlbjogUXVlcnlMaXN0PER4aVN0cmlwQ29tcG9uZW50PjtcclxuICAgIGNvbnN0cnVjdG9yKHBhcmVudE9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QsIG9wdGlvbkhvc3Q6IE5lc3RlZE9wdGlvbkhvc3QpO1xyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcclxufVxyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBEeG9WYWx1ZUF4aXNNb2R1bGUge1xyXG59XHJcbiJdfQ==