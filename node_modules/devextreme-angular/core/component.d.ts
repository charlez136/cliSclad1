/*!
 * devextreme-angular
 * Version: 19.2.6
 * Build date: Thu Jan 30 2020
 *
 * Copyright (c) 2012 - 2020 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { ElementRef, NgZone, QueryList, SimpleChanges, EventEmitter, OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit } from '@angular/core';
import { TransferState } from '@angular/platform-browser';
import { DxTemplateDirective } from './template';
import { IDxTemplateHost, DxTemplateHost } from './template-host';
import { EmitterHelper } from './events-strategy';
import { WatcherHelper } from './watcher-helper';
import { INestedOptionContainer, ICollectionNestedOption, ICollectionNestedOptionContainer } from './nested-option';
import * as ɵngcc0 from '@angular/core';
export declare const getServerStateKey: () => any;
export declare abstract class DxComponent implements OnChanges, OnInit, DoCheck, AfterContentChecked, AfterViewInit, INestedOptionContainer, ICollectionNestedOptionContainer, IDxTemplateHost {
    protected element: ElementRef;
    private watcherHelper;
    private transferState;
    private platformId;
    private _initialOptions;
    protected _optionsToUpdate: any;
    private _collectionContainerImpl;
    eventHelper: EmitterHelper;
    optionChangedHandlers: EventEmitter<any>;
    templates: DxTemplateDirective[];
    instance: any;
    isLinked: boolean;
    changedOptions: {};
    removedOptions: any[];
    widgetUpdateLocked: boolean;
    private _initTemplates;
    private _initEvents;
    private _initOptions;
    private _initPlatform;
    protected _createEventEmitters(events: any): void;
    _shouldOptionChange(name: string, value: any): boolean;
    clearChangedOptions(): void;
    protected _getOption(name: string): any;
    lockWidgetUpdate(): void;
    unlockWidgetUpdate(): void;
    protected _setOption(name: string, value: any): void;
    protected abstract _createInstance(element: any, options: any): any;
    protected _createWidget(element: any): void;
    protected _destroyWidget(): void;
    constructor(element: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, watcherHelper: WatcherHelper, transferState: TransferState, platformId: any);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngDoCheck(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    applyOptions(): void;
    resetOptions(): void;
    setTemplate(template: DxTemplateDirective): void;
    setChildren<T extends ICollectionNestedOption>(propertyName: string, items: QueryList<T>): any;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponent>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponent, never, never, {}, {}, never>;
}
export declare abstract class DxComponentExtension extends DxComponent implements OnInit, AfterViewInit {
    createInstance(element: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DxComponentExtension>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<DxComponentExtension, never, never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlDQTs7Ozs7OztBQUtBIiwic291cmNlc0NvbnRlbnQiOlsiLyohXHJcbiAqIGRldmV4dHJlbWUtYW5ndWxhclxyXG4gKiBWZXJzaW9uOiAxOS4yLjZcclxuICogQnVpbGQgZGF0ZTogVGh1IEphbiAzMCAyMDIwXHJcbiAqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxMiAtIDIwMjAgRGV2ZWxvcGVyIEV4cHJlc3MgSW5jLiBBTEwgUklHSFRTIFJFU0VSVkVEXHJcbiAqXHJcbiAqIFRoaXMgc29mdHdhcmUgbWF5IGJlIG1vZGlmaWVkIGFuZCBkaXN0cmlidXRlZCB1bmRlciB0aGUgdGVybXNcclxuICogb2YgdGhlIE1JVCBsaWNlbnNlLiBTZWUgdGhlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBvZiB0aGUgcHJvamVjdCBmb3IgZGV0YWlscy5cclxuICpcclxuICogaHR0cHM6Ly9naXRodWIuY29tL0RldkV4cHJlc3MvZGV2ZXh0cmVtZS1hbmd1bGFyXHJcbiAqL1xyXG5pbXBvcnQgeyBFbGVtZW50UmVmLCBOZ1pvbmUsIFF1ZXJ5TGlzdCwgU2ltcGxlQ2hhbmdlcywgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIE9uSW5pdCwgRG9DaGVjaywgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUcmFuc2ZlclN0YXRlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IER4VGVtcGxhdGVEaXJlY3RpdmUgfSBmcm9tICcuL3RlbXBsYXRlJztcclxuaW1wb3J0IHsgSUR4VGVtcGxhdGVIb3N0LCBEeFRlbXBsYXRlSG9zdCB9IGZyb20gJy4vdGVtcGxhdGUtaG9zdCc7XHJcbmltcG9ydCB7IEVtaXR0ZXJIZWxwZXIgfSBmcm9tICcuL2V2ZW50cy1zdHJhdGVneSc7XHJcbmltcG9ydCB7IFdhdGNoZXJIZWxwZXIgfSBmcm9tICcuL3dhdGNoZXItaGVscGVyJztcclxuaW1wb3J0IHsgSU5lc3RlZE9wdGlvbkNvbnRhaW5lciwgSUNvbGxlY3Rpb25OZXN0ZWRPcHRpb24sIElDb2xsZWN0aW9uTmVzdGVkT3B0aW9uQ29udGFpbmVyIH0gZnJvbSAnLi9uZXN0ZWQtb3B0aW9uJztcclxuZXhwb3J0IGRlY2xhcmUgY29uc3QgZ2V0U2VydmVyU3RhdGVLZXk6ICgpID0+IGFueTtcclxuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgRHhDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgRG9DaGVjaywgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgSU5lc3RlZE9wdGlvbkNvbnRhaW5lciwgSUNvbGxlY3Rpb25OZXN0ZWRPcHRpb25Db250YWluZXIsIElEeFRlbXBsYXRlSG9zdCB7XHJcbiAgICBwcm90ZWN0ZWQgZWxlbWVudDogRWxlbWVudFJlZjtcclxuICAgIHByaXZhdGUgd2F0Y2hlckhlbHBlcjtcclxuICAgIHByaXZhdGUgdHJhbnNmZXJTdGF0ZTtcclxuICAgIHByaXZhdGUgcGxhdGZvcm1JZDtcclxuICAgIHByaXZhdGUgX2luaXRpYWxPcHRpb25zO1xyXG4gICAgcHJvdGVjdGVkIF9vcHRpb25zVG9VcGRhdGU6IGFueTtcclxuICAgIHByaXZhdGUgX2NvbGxlY3Rpb25Db250YWluZXJJbXBsO1xyXG4gICAgZXZlbnRIZWxwZXI6IEVtaXR0ZXJIZWxwZXI7XHJcbiAgICBvcHRpb25DaGFuZ2VkSGFuZGxlcnM6IEV2ZW50RW1pdHRlcjxhbnk+O1xyXG4gICAgdGVtcGxhdGVzOiBEeFRlbXBsYXRlRGlyZWN0aXZlW107XHJcbiAgICBpbnN0YW5jZTogYW55O1xyXG4gICAgaXNMaW5rZWQ6IGJvb2xlYW47XHJcbiAgICBjaGFuZ2VkT3B0aW9uczoge307XHJcbiAgICByZW1vdmVkT3B0aW9uczogYW55W107XHJcbiAgICB3aWRnZXRVcGRhdGVMb2NrZWQ6IGJvb2xlYW47XHJcbiAgICBwcml2YXRlIF9pbml0VGVtcGxhdGVzO1xyXG4gICAgcHJpdmF0ZSBfaW5pdEV2ZW50cztcclxuICAgIHByaXZhdGUgX2luaXRPcHRpb25zO1xyXG4gICAgcHJpdmF0ZSBfaW5pdFBsYXRmb3JtO1xyXG4gICAgcHJvdGVjdGVkIF9jcmVhdGVFdmVudEVtaXR0ZXJzKGV2ZW50czogYW55KTogdm9pZDtcclxuICAgIF9zaG91bGRPcHRpb25DaGFuZ2UobmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogYm9vbGVhbjtcclxuICAgIGNsZWFyQ2hhbmdlZE9wdGlvbnMoKTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBfZ2V0T3B0aW9uKG5hbWU6IHN0cmluZyk6IGFueTtcclxuICAgIGxvY2tXaWRnZXRVcGRhdGUoKTogdm9pZDtcclxuICAgIHVubG9ja1dpZGdldFVwZGF0ZSgpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIF9zZXRPcHRpb24obmFtZTogc3RyaW5nLCB2YWx1ZTogYW55KTogdm9pZDtcclxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfY3JlYXRlSW5zdGFuY2UoZWxlbWVudDogYW55LCBvcHRpb25zOiBhbnkpOiBhbnk7XHJcbiAgICBwcm90ZWN0ZWQgX2NyZWF0ZVdpZGdldChlbGVtZW50OiBhbnkpOiB2b2lkO1xyXG4gICAgcHJvdGVjdGVkIF9kZXN0cm95V2lkZ2V0KCk6IHZvaWQ7XHJcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBuZ1pvbmU6IE5nWm9uZSwgdGVtcGxhdGVIb3N0OiBEeFRlbXBsYXRlSG9zdCwgd2F0Y2hlckhlbHBlcjogV2F0Y2hlckhlbHBlciwgdHJhbnNmZXJTdGF0ZTogVHJhbnNmZXJTdGF0ZSwgcGxhdGZvcm1JZDogYW55KTtcclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xyXG4gICAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIGFwcGx5T3B0aW9ucygpOiB2b2lkO1xyXG4gICAgcmVzZXRPcHRpb25zKCk6IHZvaWQ7XHJcbiAgICBzZXRUZW1wbGF0ZSh0ZW1wbGF0ZTogRHhUZW1wbGF0ZURpcmVjdGl2ZSk6IHZvaWQ7XHJcbiAgICBzZXRDaGlsZHJlbjxUIGV4dGVuZHMgSUNvbGxlY3Rpb25OZXN0ZWRPcHRpb24+KHByb3BlcnR5TmFtZTogc3RyaW5nLCBpdGVtczogUXVlcnlMaXN0PFQ+KTogYW55O1xyXG59XHJcbmV4cG9ydCBkZWNsYXJlIGFic3RyYWN0IGNsYXNzIER4Q29tcG9uZW50RXh0ZW5zaW9uIGV4dGVuZHMgRHhDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gICAgY3JlYXRlSW5zdGFuY2UoZWxlbWVudDogYW55KTogdm9pZDtcclxuICAgIG5nT25Jbml0KCk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxufVxyXG4iXX0=